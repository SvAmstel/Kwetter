import { Component, OnInit } from '@angular/core';
import { Http, Response, Headers } from '@angular/http';   // to use Http
import 'rxjs/add/operator/map';
// For SignalR
//import * as jq from 'jquery/dist/jquery.min.js';
//import * as signalr from '@aspnet/signalr';
//import 'Scripts/jquery.signalR-2.2.2.min.js';
//import 'signalr/hubs'; // this is auto-generated by ASP.NET
//declare var $: any; // jQuery


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {

  title = 'Kwetter';
  // Our object we will get/post from the server
  commonData: CommonData = { message: "AAAAAAAAAAAA" };
  // constructor with http injection
  constructor(private http: Http) {
   // this.connectToSignalRHub(); // SignalR
  }

  // get our commonData object from the server
  getCommonData() {
    this.http.get(`http://localhost:59694/api/kwetter/test`)
      .map((res: Response) => res.json()).subscribe(data => this.commonData = data);
  }

  // post our commonData to the server
  setCommonData() {
    let headers = new Headers();
    headers.append('Content-Type', 'application/json');
    this.http
      .post(`http://localhost:59694/api/kwetter/test`, JSON.stringify(this.commonData), { headers: headers })
      .map(res => res.json()).subscribe(res => { });
  }
  /*
  // Real time SignalR related part
  // $.connection.testSignalRHub.server
  private server: any; // used to call server
  // $.connection.testSignalRHub.client
  private client: any; // used to receive calls from server
  // $.connection.testSignalRHub
  private hub: any; // hub itself

  // connect and initialize the SignalR hub
  connectToSignalRHub() {
    // Initialize the hub
    // note the first letter of the hub class - lowercase!!!
    this.hub = $.connection.testSignalRHub;
    this.server = this.hub.server;
    this.client = this.hub.client;
    let self = this;

    // register callbacks to react to server events
    // note the first letter of the method name - lowercase!!!
    this.client.broadcastCommonData = (data: CommonData) => {
      self.commonData = data;
    };

    // connect to the hub
        $.connection.hub.start().done((data: any) => {
      console.log('hub connection started ' + data);
    }).fail((error: any) => {
      console.log('Could not connect to hub:' + error);
    });

    // if you need to call the server hub method - use server variable:
    //this.server.broadcastCommonData(this.commonData);
  }


  */

   
  Login(): void {
    console.log("LOGIN");
  }
}

    // Our data model class. It is not necessary, but this way you get 
    // a strongly- typed objects and compile- time validation
export class CommonData {
  message: string;
}


